import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,a as e}from"./app-HNg_g3PK.js";const p={},l=e(`<p>MySQL 的数据操纵功能是指对数据库中的数据的查询、添加、删除和修改操作，使用的命令分别为 SELECT、INSERT、DELETE 和 UPDATE，这也是事务用户对数据库进行操作时使用最多的四个命令。本章将重点介绍</p><ul><li>SELECT 命令的基本格式</li><li>四种不同类型的查询 <ul><li>单表查询</li><li>多表连接查询</li><li>嵌套查询和分组查询</li></ul></li></ul><p>然后介绍 INSERT、DELETE 和 UPDATE 的基本格式。</p><h2 id="一、简单查询-单表" tabindex="-1"><a class="header-anchor" href="#一、简单查询-单表" aria-hidden="true">#</a> 一、简单查询-单表</h2><p>SELECT语句是数据库操作中最基本和最重要的语句之一，其功能是从数据库中检索满足用户需要的数据。用户可以根据表中的一个或多个字段建立查询条件，以便从数据库中检索出符合条件的记录。</p><ul><li>查询的数据源可以是一张表，也可以是多张表，甚至可以是视图</li><li>查询的结果是由满足条件的若干记录中的指定字段组成</li></ul><p>这样用户可以根据需要获取特定的数据信息因此，SELECT 语句在数据库操作中扮演着非常重要的角色，它允许用户根据特定条件从数据库中提取所需的数据，为数据分析和应用提供了基础支持。</p><h3 id="_1-1-查询语句的基本格式" tabindex="-1"><a class="header-anchor" href="#_1-1-查询语句的基本格式" aria-hidden="true">#</a> 1.1 查询语句的基本格式</h3><p>查询语句包括五个子句：SELECT、FROM、WHERE、GROUP BY和 ORDER BY。这些子句用于指定查询的目标字段、数据源、查询条件、分组方式和排序方式。完整的语法格式如下 :</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 目标字段 <span class="token operator">|</span> 字段表达式或函数
<span class="token keyword">FROM</span> 数据源
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>元组选择条件<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>分组字段<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">HAVING</span> <span class="token operator">&lt;</span>组选择条件<span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>排序字段<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 SELECT 和 FROM 为必选子句，WHERE、GROUP BY、HAVING 和 ORDER BY 为可选子句，每个子句的功能如下:</p><ul><li>SELECT 子句用于指定输出的字段名，可以是单个字段或多个字段，当输出多个字段时，字段名之间用逗号隔开 <ul><li>如果要输出表中的所有字段，可以使用 <mark>*</mark> 代替所有的字段名</li><li>此外，如果查询结果中有重复行，可以在字段名列表前使用 <mark>DISTINCT</mark> 操作符去掉重复行</li><li><strong>该子句还可以指定要输出的字段表达式或函数</strong>，例如：将学生选课成绩提高 10% 输出以及输出学生选课平均成绩等</li></ul></li><li>FROM 用于指定数据源，即要从哪个表或视图中进行查询，当需要从多个数据源进行查找时，需要将表之间按关联字段进行等值连接的操作</li><li>WHERE 用于指定查询的条件，即根据哪些条件来筛选数据，表中满足条件的元组将被输出，当有多个查询条件时应在多个条件之间使用 AND 或 OR 操作符进行连接</li><li>GROUP BY 是将满足 WHERE 条件的记录进行分组 (如果没有 WHERE 子句，则将表中所有记录进行分组)，再对每组中的巨鹿按指定字段使用指定函数进行统计并输出。若其后还有 HAVING 选项，则需要先按照 HAVING 选项中的组选择条件对各组进行筛选，满足条件的组才统计输出</li><li>ORDER BY 用于对查询结果进行排序，可以指定一个或多个字段进行排序，并可以指定升序（ASC）或降序（DESC）当有多个排序字段时，会先按字段名 1 的值进行排序，字段名 1 的值相同时按字段名 2 的值进行排序，以此类推。其语法格式如下:</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>字段名 <span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>字段名 <span class="token number">2</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>···字段名 n <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-select-语句中的操作符" tabindex="-1"><a class="header-anchor" href="#_1-2-select-语句中的操作符" aria-hidden="true">#</a> 1.2 SELECT 语句中的操作符</h3><p>SELECT 语句中的操作符包括</p><ul><li>算数操作符、比较操作符</li><li>逻辑操作符、集合操作符</li><li>其他操作</li></ul><h3 id="算术操作符" tabindex="-1"><a class="header-anchor" href="#算术操作符" aria-hidden="true">#</a> - 算术操作符</h3><p>算术操作符是 SQL 中最基本的操作运算符，用于各类数值计算，主要有 + (加)、- (减)、* (乘)、/ (除)、和 % (求余或模)</p><h3 id="比较操纵符" tabindex="-1"><a class="header-anchor" href="#比较操纵符" aria-hidden="true">#</a> - 比较操纵符</h3><p>比较运算符经常在 SELECT 的查询条件子句中使用，用来查询满足指定条件的记录。主要包括 &gt;、&lt;、=、&gt;=、&lt;=、!=、以及IN、BETWEEN AND、IS NULL、LIKE 和 EXISTS，用比较运算符连接的表达式其返回值只能是 1 代表结果为真、0 代表结果为假或 NULL 代表比较结果不确定</p><blockquote><p>IN | NOT IN 操作符</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>字段<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token operator">IN</span> <span class="token punctuation">(</span>列表值 <span class="token operator">|</span> 子查询<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>将字段值与列表值或子查询的结果集进行比较，若字段值在 [不在] 列表值或结果集中则返回 1 [0]</p><p>示例：</p><blockquote><p>BETWEEN AND</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>字段<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token operator">BETWEEN</span> 值<span class="token number">1</span> <span class="token operator">AND</span> 值<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>将字段值与值1 和 值2 进行比较，若字段值在 [不在] 两个值之间(包含 值1 和 值2)则返回 1 [0]</p><p>示例：</p><blockquote><p>IS NULL | IS NOT NULL</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>字段<span class="token operator">&gt;</span> <span class="token operator">IS</span> <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token boolean">NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>判断字段是 [不是] 空值，若是 [不是] 空值，则返回值为 1 [0]</p><p>示例：</p><blockquote><p>LIKE</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>字段<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token operator">LIKE</span> 通配符表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>判断字段值是 [不是] 与通配符表达式匹配，若匹配则返回值 1 [0]，其中进行比较的字段类型必须是字符串型通配符有:</p><ul><li>百分号 <mark>%</mark> 代表可以匹配任意数目 (包括 0)</li><li>下划线 <mark>_</mark> 代表只能匹配单个字符</li></ul><p>示例：</p><blockquote><p>EXISTS</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>子查询<span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>判断子查询的结果集是否为空</p><p>示例：</p><h3 id="逻辑操作符" tabindex="-1"><a class="header-anchor" href="#逻辑操作符" aria-hidden="true">#</a> - 逻辑操作符</h3><p>用于逻辑运算，包括</p><ul><li>与运算（ AND 或 &amp;&amp;）</li><li>或运算（ OR 或 1或！）</li><li>非运算 (NOT 或 !)</li><li>任何一个（ ANY) 和 每个（ ALL)</li></ul><blockquote><p>AND</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>条件表达式 <span class="token number">1</span> <span class="token operator">AND</span> 条件表达式 <span class="token number">2</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>判断条件表达式 1 和条件表达式 2 是否都成立，若是则返回值为 1 ，否则返回值为 0</p><p>示例：</p><blockquote><p>OR</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>条件表达式 <span class="token number">1</span> <span class="token operator">OR</span> 条件表达式 <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>判断两个条件表达式中是否有一个成立，若是则返回值为 1 ，否则返回值为 0</p><p>示例：</p><blockquote><p>NOT</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">NOT</span> 条件表达式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>判断条件表达式是否不成立，若是则返回值为 1 ，否则返回值为 0</p><p>示例：</p><blockquote><p>ANY</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token operator">&lt;</span>字段<span class="token operator">&gt;</span><span class="token operator">&lt;</span>比较运算符<span class="token operator">&gt;</span> <span class="token keyword">ANY</span> （列表值 <span class="token operator">|</span> 子查询）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>将字段值与列表值或子查询结果集中任何一个值进行比较，若满足比较运算符给出的条件，则返回值为 1 ，否则返回值为 0</p><p>示例：</p><h3 id="集合操作符" tabindex="-1"><a class="header-anchor" href="#集合操作符" aria-hidden="true">#</a> - 集合操作符</h3><p>集合操作符包括：</p><ul><li>并运算（ UNION)</li><li>交运算（ INTERSECT)</li><li>差运算（ EXCEPT)</li></ul><p>但目前 MySQL 只支持 UNION 操作符，不支持 INTERSECT 和 EXCEPT 操作符</p><blockquote><p>UNION</p></blockquote><p>语法格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>列表值 <span class="token number">1</span> <span class="token operator">|</span> 子查询 <span class="token number">1</span> <span class="token keyword">UNION</span> 列表值<span class="token number">2</span> <span class="token operator">|</span>子查询<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>含义：</p><p>将两个列表值或两个子查询的结果集进行并运算，返回值为并运算的结果</p><p>示例：</p><h3 id="其它操作符" tabindex="-1"><a class="header-anchor" href="#其它操作符" aria-hidden="true">#</a> - 其它操作符</h3><ol><li><mark>*</mark> 操作符是一个表中的所有字段的简写，一般用在查询语句的 SELECT 子句中，表示要输出表中全部字段</li><li>ALL 操作符 ALL 一般用在查询语句 SELECT 子句的目标列前，说明在查洵结果中保留重复行</li><li>DISTINCT 一般用在查询语句 SELECT 子句的目标列前，说明在查询结果中去掉重复行</li></ol><h3 id="_1-3-不带-where-条件的查询" tabindex="-1"><a class="header-anchor" href="#_1-3-不带-where-条件的查询" aria-hidden="true">#</a> 1.3 不带 WHERE 条件的查询</h3><h3 id="输出所有字段" tabindex="-1"><a class="header-anchor" href="#输出所有字段" aria-hidden="true">#</a> - 输出所有字段</h3><h3 id="输出表中指定字段" tabindex="-1"><a class="header-anchor" href="#输出表中指定字段" aria-hidden="true">#</a> - 输出表中指定字段</h3><h3 id="用-all-或-distinct-操作符" tabindex="-1"><a class="header-anchor" href="#用-all-或-distinct-操作符" aria-hidden="true">#</a> - 用 ALL 或 DISTINCT 操作符</h3><h3 id="select-子句中用字段表达式或函数" tabindex="-1"><a class="header-anchor" href="#select-子句中用字段表达式或函数" aria-hidden="true">#</a> - SELECT 子句中用字段表达式或函数</h3><h3 id="_1-4-带-where-条件的查询" tabindex="-1"><a class="header-anchor" href="#_1-4-带-where-条件的查询" aria-hidden="true">#</a> 1.4 带 WHERE 条件的查询</h3><h3 id="使用比较操作符的条件查询" tabindex="-1"><a class="header-anchor" href="#使用比较操作符的条件查询" aria-hidden="true">#</a> - 使用比较操作符的条件查询</h3><h3 id="使用-in-操作符的条件查询" tabindex="-1"><a class="header-anchor" href="#使用-in-操作符的条件查询" aria-hidden="true">#</a> - 使用 IN 操作符的条件查询</h3><h3 id="使用-between-and-操作符的条件查询" tabindex="-1"><a class="header-anchor" href="#使用-between-and-操作符的条件查询" aria-hidden="true">#</a> - 使用 BETWEEN...AND 操作符的条件查询</h3><h3 id="使用-like-操作符的条件查询" tabindex="-1"><a class="header-anchor" href="#使用-like-操作符的条件查询" aria-hidden="true">#</a> - 使用 LIKE 操作符的条件查询</h3><h3 id="使用-and-或-or-连接多个条件表达式" tabindex="-1"><a class="header-anchor" href="#使用-and-或-or-连接多个条件表达式" aria-hidden="true">#</a> - 使用 AND 或 OR 连接多个条件表达式</h3><h3 id="_1-5-查询结果的排序" tabindex="-1"><a class="header-anchor" href="#_1-5-查询结果的排序" aria-hidden="true">#</a> 1.5 查询结果的排序</h3><h2 id="二、连接查询-多表" tabindex="-1"><a class="header-anchor" href="#二、连接查询-多表" aria-hidden="true">#</a> 二、连接查询-多表</h2><h3 id="_2-1-内连接中的等值连接和自然连接" tabindex="-1"><a class="header-anchor" href="#_2-1-内连接中的等值连接和自然连接" aria-hidden="true">#</a> 2.1 内连接中的等值连接和自然连接</h3><h3 id="等值连接" tabindex="-1"><a class="header-anchor" href="#等值连接" aria-hidden="true">#</a> - 等值连接</h3><h3 id="自然连接" tabindex="-1"><a class="header-anchor" href="#自然连接" aria-hidden="true">#</a> - 自然连接</h3><h3 id="_2-2-内连接和外连接的区别" tabindex="-1"><a class="header-anchor" href="#_2-2-内连接和外连接的区别" aria-hidden="true">#</a> 2.2 内连接和外连接的区别</h3><h3 id="自身连接" tabindex="-1"><a class="header-anchor" href="#自身连接" aria-hidden="true">#</a> 自身连接</h3><h2 id="三、嵌套查询-子查询" tabindex="-1"><a class="header-anchor" href="#三、嵌套查询-子查询" aria-hidden="true">#</a> 三、嵌套查询-子查询</h2><h3 id="_3-1-用-in-操作符的子查询" tabindex="-1"><a class="header-anchor" href="#_3-1-用-in-操作符的子查询" aria-hidden="true">#</a> 3.1 用 IN 操作符的子查询</h3><h3 id="_3-2-用比较运算符的子查询" tabindex="-1"><a class="header-anchor" href="#_3-2-用比较运算符的子查询" aria-hidden="true">#</a> 3.2 用比较运算符的子查询</h3><h3 id="_3-3-用-any-或-all-运算符的子查询" tabindex="-1"><a class="header-anchor" href="#_3-3-用-any-或-all-运算符的子查询" aria-hidden="true">#</a> 3.3 用 ANY 或 ALL 运算符的子查询</h3><h3 id="_3-4-用-exists-操作符的子查询" tabindex="-1"><a class="header-anchor" href="#_3-4-用-exists-操作符的子查询" aria-hidden="true">#</a> 3.4 用 EXISTS 操作符的子查询</h3><h3 id="_3-5-子查询的局限性" tabindex="-1"><a class="header-anchor" href="#_3-5-子查询的局限性" aria-hidden="true">#</a> 3.5 子查询的局限性</h3><h2 id="四、分组和函数查询" tabindex="-1"><a class="header-anchor" href="#四、分组和函数查询" aria-hidden="true">#</a> 四、分组和函数查询</h2><h3 id="_4-1-sql-聚合函数" tabindex="-1"><a class="header-anchor" href="#_4-1-sql-聚合函数" aria-hidden="true">#</a> 4.1 SQL 聚合函数</h3><h3 id="_4-2-group-by-实现分组查询" tabindex="-1"><a class="header-anchor" href="#_4-2-group-by-实现分组查询" aria-hidden="true">#</a> 4.2 GROUP BY 实现分组查询</h3><h3 id="_4-3-带-having-子句的分组条件查询" tabindex="-1"><a class="header-anchor" href="#_4-3-带-having-子句的分组条件查询" aria-hidden="true">#</a> 4.3 带 HAVING 子句的分组条件查询</h3><h2 id="五、添加、删除和修改数据" tabindex="-1"><a class="header-anchor" href="#五、添加、删除和修改数据" aria-hidden="true">#</a> 五、添加、删除和修改数据</h2>`,119),r=[l];function t(i,o){return s(),n("div",null,r)}const h=a(p,[["render",t],["__file","mysql06.html.vue"]]);export{h as default};
